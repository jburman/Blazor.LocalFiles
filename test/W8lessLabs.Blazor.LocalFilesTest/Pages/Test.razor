@page "/test"

<h1>Blazor.LocalFiles Test Page</h1>

@* 
    This example creates multiple instances of the FileSelect so that files can be selected multiple times.
    The @key is important to preserve the state of the components. We want to be able to still access 
    their underlying file handles later on.
*@
@for (int i = 0; i < selectionCount + 1; i++)
{
    if (i == selectionCount)
    {
        @* this is the current un-used file selector *@
        <FileSelect @key="i" @ref="multiFileSelect" IsMultiple="true"></FileSelect>
    }
    else
    {
        @* these are the previously used file selectors *@
        <FileSelect @key="i" IsMultiple="true"></FileSelect>
    }
}

<div class="row">
    <div class="col-sm-6">
        <div>
            <button class="btn btn-primary" @onclick="@SelectFiles">Select Files</button>
        </div>
        @if (errorMessage != null)
        {

            <div class="alert alert-warning" role="alert">
                @errorMessage
                <button type="button" class="close" aria-label="Close" @onclick="@CloseErrorAlert">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    </div>
</div>

@if (allFiles.Count > 0)
{
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Name</th>
                <th>Last Modified</th>
                <th>Size</th>
                <th>Is Loaded</th>
                <th>Loaded Size</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in allFiles.Values.OrderBy(f => f.SelectedFile.Name))
            {
                <tr>
                    <td>@file.SelectedFile.Name</td>
                    <td>@file.SelectedFile.LastModified.ToLocalTime()</td>
                    <td>@file.SelectedFile.Size</td>
                    <td>@file.IsLoaded</td>
                    <td>@file.LoadedSize</td>
                    <td><button class="btn btn-primary" @onclick="@(async () => await LoadFile(file))">Load File</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code
{
    public class LoadFileWithSelector
    {
        public SelectedFile SelectedFile { get; set; }
        public bool IsLoaded { get; set; }
        public int LoadedSize { get; set; }
        public FileSelect FileReader { get; set; }
    }

    int selectionCount = 0;
    FileSelect multiFileSelect;

    Dictionary<string, LoadFileWithSelector> allFiles = new Dictionary<string, LoadFileWithSelector>();

    string errorMessage;

    void SelectFiles()
    {
        ResetErrorState();

        multiFileSelect.SelectFiles(FilesSelected);
    }

    Task FilesSelected(SelectedFile[] selectedFiles)
    {
        selectionCount++;

        foreach (var file in selectedFiles)
        {
            allFiles[file.Name] = new LoadFileWithSelector()
            {
                SelectedFile = file,
                IsLoaded = false,
                LoadedSize = 0,
                FileReader = multiFileSelect
            };
        }

        StateHasChanged();

        return Task.CompletedTask;
    }

    async Task LoadFile(LoadFileWithSelector file)
    {
        using (var fileReader = file.FileReader.GetFileReader(file.SelectedFile))
        {
            try
            {
                using (var fileStream = await fileReader.GetFileStreamAsync())
                {
                    var buffer = new System.IO.MemoryStream();
                    await fileStream.CopyToAsync(buffer);
                    file.IsLoaded = true;
                    file.LoadedSize = (int)buffer.Length;
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }

        StateHasChanged();
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
        StateHasChanged();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}
