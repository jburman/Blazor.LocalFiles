@page "/"

<h1>Blazor.LocalFiles Test Page</h1>

<FileSelect @ref="multiFileSelect" IsMultiple="true"></FileSelect>

<FileSelect @ref="imageFileSelect" Accept=".jpg,.jpeg,.png"></FileSelect>

<div class="row">
    <div class="col-sm-6">
        <div>
            <button class="btn btn-primary" @onclick="@SelectFiles">Select Files</button>
            <button class="btn btn-primary" @onclick="@SelectImageFile">Select Image</button>
        </div>
        @if (errorMessage != null)
        {

            <div class="alert alert-warning" role="alert">
                @errorMessage
                <button type="button" class="close" aria-label="Close" @onclick="@CloseErrorAlert">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
        }
    </div>
</div>

@if (loadFiles != null)
{
    <table class="table table-condensed">
        <thead>
            <tr>
                <th>Name</th>
                <th>Last Modified</th>
                <th>Size</th>
                <th>Is Loaded</th>
                <th>Loaded Size</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var file in loadFiles)
            {
                <tr>
                    <td>@file.SelectedFile.Name</td>
                    <td>@file.SelectedFile.LastModified.ToLocalTime()</td>
                    <td>@file.SelectedFile.Size</td>
                    <td>@file.IsLoaded</td>
                    <td>@file.LoadedSize</td>
                    <td><button class="btn btn-primary" @onclick="@(async () => await LoadFile(file))">Load File</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@if (imageFileUrl != null)
{
    <div>
        <div style="margin: 10px;">
            <img src="@imageFileUrl" style="width: 400px;" />
        </div>
        <div>
            <h5>Load the image data into .NET</h5>
            <button class="btn btn-primary" @onclick="@LoadImageFile">Load Image</button>
        </div>
        <div>
            Is Loaded: @imageFile.IsLoaded
        </div>
        <div>
            Loaded Size: @imageFile.LoadedSize
        </div>
    </div>
}


@code 
{
    FileSelect multiFileSelect;
    FileSelect imageFileSelect;
    SelectedFileReader imageFileReader;

    LoadFile[] loadFiles;
    LoadFile imageFile;
    string imageFileUrl;

    string errorMessage;

    void SelectFiles()
    {
        ResetErrorState();

        // ##########################
        // Option #1
        // Provide callback directly to SelectFiles();
        multiFileSelect.SelectFiles(FilesSelected);

        // ##########################
        // Option #2
        // Can listen on event
        //if(fileSelect == null)
        //    fileSelect.OnFilesSelected += (selectedFiles) => FilesSelectedAsync(selectedFiles);
        //fileSelect.SelectFiles();
    }

    void SelectImageFile()
    {
        ResetErrorState();

        imageFileSelect.SelectFiles(ImageFileSelected);
    }

    Task FilesSelected(SelectedFile[] selectedFiles)
    {
        loadFiles = selectedFiles.Select(file => new LoadFile()
        {
            SelectedFile = file,
            IsLoaded = false,
            LoadedSize = 0
        }).ToArray();

        StateHasChanged();

        return Task.CompletedTask;
    }

    // Shows how to use the blob file url directly for rendering.
    // LoadImageFile() below also loads the image's raw data directly into the .NET runtime.
    async Task ImageFileSelected(SelectedFile[] selectedFiles)
    {
        imageFile = new LoadFile()
        {
            SelectedFile = selectedFiles.FirstOrDefault(),
            IsLoaded = false,
            LoadedSize = 0
        };

        // when the SelectedFileReader is disposed the blob URL is destroyed as well. So, don't dispose before rendering it!
        if(imageFileReader != null)
        {
            imageFileReader.Dispose();
        }

        // don't wrap SelectedFileReader in a using here as Chrome will not display the image 
        // once it's disposed.
        imageFileReader = imageFileSelect.GetFileReader(imageFile.SelectedFile);
        imageFileUrl = await imageFileReader.GetFileBlobUrlAsync();
        StateHasChanged();

    }

    async Task LoadFile(LoadFile file)
    {
        using (var fileReader = multiFileSelect.GetFileReader(file.SelectedFile))
        {
            try
            {
                // ##########################
                // Option #1
                // Get all the bytes at one time
                //var fileData = await fileReader.GetFileBytesAsync();
                //file.IsLoaded = true;
                //file.LoadedSize = fileData.Length;

                // ##########################
                // Option #2
                // Get a stream
                using (var fileStream = await fileReader.GetFileStreamAsync())
                {
                    var buffer = new System.IO.MemoryStream();
                    await fileStream.CopyToAsync(buffer);
                    file.IsLoaded = true;
                    file.LoadedSize = (int)buffer.Length;
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }

        StateHasChanged();
    }

    async Task LoadImageFile()
    {
        try
        {
            using (var fileReader = imageFileSelect.GetFileReader(imageFile.SelectedFile))
            {
                var imageData = await fileReader.GetFileBytesAsync();
                imageFile.IsLoaded = true;
                imageFile.LoadedSize = imageData.Length;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

        StateHasChanged();
    }

    void CloseErrorAlert()
    {
        ResetErrorState();
        StateHasChanged();
    }

    void ResetErrorState()
    {
        errorMessage = null;
    }
}
